package org.jmedikit.lib.io;

import java.io.File;
import java.util.ArrayList;

import javax.inject.Inject;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.jobs.Job;
import org.jmedikit.lib.core.DicomObject;
import org.jmedikit.lib.core.DicomSeries;
import org.jmedikit.lib.core.DicomStudy;
import org.jmedikit.lib.core.Patient;

public class DicomImporter extends Job{
	
	@Inject
	
	File importLocation;
	
	private int filenumber;
	
	IProgressMonitor monitor;
	
	private ArrayList<Patient> patients;
	
	public DicomImporter(String jobName, File f){
		super(jobName);
		importLocation = f;
		
		//determine filenumber;
		System.out.println(countFiles(f, 0));
		patients = new ArrayList<>();
		
		//importDicomFiles();
	}
	
	private void countFiles(File f){
		if(f.isDirectory()){
			File[] files = f.listFiles();
			for(File file : files){
				if(file.isDirectory()){
					System.out.println(file.getPath() + " "+counter);
					countFiles(file);
				}
				else{
					System.out.println("File "+file.getPath()+" "+counter);
					filenumber++;
				}
			}
		}
		else{
			filenumber++;
		}
	}
	
	private void importDicomFiles(){
		if(importLocation.isDirectory()){
			File[] files = importLocation.listFiles();
			for(File f : files){
				if(f.isDirectory()){
					importLocation = f;
					importDicomFiles();
				}
				else{
					importDicomObject(f);
				}
			}
		}
		else importDicomObject(importLocation);
	}
	
	private void importDicomObject(File f){
		try {
			DicomObject obj = new DicomObject(f);
			
			String name = (String) obj.getTagData("PatientName", DicomData.RETURN_STRING);
			String studyId = (String) obj.getTagData("StudyInstanceUID", DicomData.RETURN_STRING);
			String seriesId = (String) obj.getTagData("SeriesInstanceUID", DicomData.RETURN_STRING);
			
			DicomSeries singleSeries = new DicomSeries(seriesId);
			DicomStudy study = new DicomStudy(studyId);
			Patient p = new Patient(name);
			
			if(!patients.contains(p)){
				patients.add(p);
			}
			
			for(Patient patient : patients){
				ArrayList<DicomStudy> std = patient.getDicomStudies();
				if(!std.contains(study) && (patient.getPatientName().equals(p.getPatientName()))){
					patient.addDicomStudy(study);
				}
				for(DicomStudy dcmstudy : std){
					ArrayList<DicomSeries> srs = dcmstudy.getDicomSeries();
					if(!srs.contains(singleSeries) && (dcmstudy.getStudyInstanceUid().equals(study.getStudyInstanceUid()))){
						dcmstudy.addDicomSeries(singleSeries);
					}
					for(DicomSeries dcmsrs : srs){
						ArrayList<DicomObject> dcmobjs = dcmsrs.getDicomObjects();
						if(!dcmobjs.contains(obj) && dcmsrs.getSeriesInstanceUid().equals(singleSeries.getSeriesInstanceUid())){
							dcmsrs.addDicomObject(obj);
						}
					}
				}
			}
		} catch (Exception e) {
			//e.printStackTrace();
			System.out.println("DicomObject is null");
			return;
		}
	}
	
	public void printImportedLocation(){
		for(Patient p : patients){
			System.out.println("Patient "+p.getPatientName());
			for(DicomStudy stdy : p.getDicomStudies()){
				System.out.println("\tStudy "+stdy.getStudyInstanceUid());
				for(DicomSeries srs : stdy.getDicomSeries()){
					System.out.println("\t\tSeries "+srs.getSeriesInstanceUid());
					//System.out.println("\t\t\t"+srs.getDicomObjects().size());
					for(DicomObject obj : srs.getDicomObjects()){
						System.out.println("\t\t\t"+obj.getFile().getName()+", Frames: "+obj.getDepth());
					}
				}
			}
		}
	}


	@Override
	protected IStatus run(IProgressMonitor monitor) {
		monitor.beginTask(this.getName(), 0);
		return null;
	}
}
