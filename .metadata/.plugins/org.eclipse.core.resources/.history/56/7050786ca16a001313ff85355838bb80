package org.jmedikit;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.tools.DiagnosticCollector;
import javax.tools.DiagnosticListener;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileManager;
import javax.tools.JavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;

import org.eclipse.core.runtime.FileLocator;
import org.jmedikit.lib.io.JavaFileFromString;
import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;

public class Activator implements BundleActivator{

	private static BundleContext context;

	static BundleContext getContext() {
		return context;
	}

	/*
	 * (non-Javadoc)
	 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)
	 */
	public void start(BundleContext bundleContext) throws Exception {
		Activator.context = bundleContext;
		System.out.println("ORG.JMEDIKIT.PLUGIN STARTUP");
		
		File f = new File("C:\\Users\\rkorb\\Desktop\\plugins\\Testplugin\\src\\JmkPlgn.java");
		System.out.println(f.getAbsolutePath()+", "+f.getPath()+", "+System.getProperty("user.dir"));
		//JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
		
		FileInputStream stream = new FileInputStream(f);
	    try {
	        Reader reader = new BufferedReader(new InputStreamReader(stream));
	        StringBuilder builder = new StringBuilder();
	        char[] buffer = new char[8192];
	        int read;
	        while ((read = reader.read(buffer, 0, buffer.length)) > 0) {
	            builder.append(buffer, 0, read);
	        }
	        JavaFileFromString j = new JavaFileFromString("JmkPlgn", builder.toString());
	        Iterable<? extends JavaFileObject> fileObjects = Arrays.asList(j);
	        
	        List<String> optionList = new ArrayList<String>();
	        // set compiler's classpath to be same as the runtime's
	        optionList.addAll(Arrays.asList("-classpath",System.getProperty("org.jmedikit")));

	        
	        StringWriter output = new StringWriter();
	        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
	        boolean success = compiler.getTask( output, compiler.getStandardFileManager(null, null, null), null, optionList, null, fileObjects).call(); 
	        System.out.println(output.toString());
	        
	       // PrintWriter writer = new PrintWriter("/org.jmedikit.plugin/src/org/jmedikit/test/test.java", "UTF-8");
		   // writer.println(builder.toString());
		   // writer.close();
	    } finally {
	        // Potential issue here: if this throws an IOException,
	        // it will mask any others. Normally I'd use a utility
	        // method which would log exceptions and swallow them
	        stream.close();
	    } 
	    
	    
		
	   /* File[] javaFiles = new File[]{f};  
	      
	      
	    DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();  
	    StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null);  
	      
	    Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromFiles(Arrays.asList(javaFiles));  
	      
	    List<String> optionList = new ArrayList<String>();  
	    optionList.addAll(Arrays.asList("-classpath", "C:\\Users\\rkorb\\Desktop\\jmedikit\\jmedikit\\plugins\\org.jmedikit.plugin_1.0.0.201312212324.jar"));  
	    JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, diagnostics, optionList, null, compilationUnits);  
	    System.out.println(task.call());*/
	    //compiler.run(null, null, null, javaFiles[0].getPath());
	}

	/*
	 * (non-Javadoc)
	 * @see org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)
	 */
	public void stop(BundleContext bundleContext) throws Exception {
		Activator.context = null;
	}

}
