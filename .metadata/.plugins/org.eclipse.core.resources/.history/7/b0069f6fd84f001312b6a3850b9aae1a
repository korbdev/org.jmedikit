package org.jmedikit.plugin.gui;


import java.io.File;
import java.util.ArrayList;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.jobs.IJobManager;
import org.eclipse.core.runtime.jobs.Job;
import org.eclipse.core.runtime.jobs.ProgressProvider;
import org.eclipse.e4.core.di.annotations.Optional;
import org.eclipse.e4.core.services.events.IEventBroker;
import org.eclipse.e4.tools.services.IResourcePool;
import org.eclipse.e4.ui.di.UIEventTopic;
import org.eclipse.e4.ui.di.UISynchronize;
import org.eclipse.e4.ui.model.application.ui.menu.MToolControl;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.jmedikit.lib.core.DicomTreeItem;
import org.jmedikit.lib.image.AbstractImage;
import org.jmedikit.lib.io.DicomImporter;
import org.jmedikit.plugin.gui.events.AToolEvent;
import org.jmedikit.plugin.gui.events.EventConstants;
import org.jmedikit.plugin.gui.events.TransformationToolEvent;
import org.jmedikit.plugin.gui.tools.TransformationToolFactory;


public class ImageViewPart {
	
	@Inject
	private IResourcePool resourcePool;
	
	@Inject
	private IEventBroker broker;
	
	@Inject
	private Shell shell;
	
	@Inject
	private UISynchronize sync;
	
	private Composite parent;
	
	private ImageViewComposite active;
	
	private AToolEvent toolevent;
	
	private ArrayList<AbstractImage> images;
	
	public ImageViewPart(){
		toolevent = new TransformationToolEvent(new TransformationToolFactory(), TransformationToolFactory.MOVE_TOOL);
		images = new ArrayList<AbstractImage>();
	}
	
	@PostConstruct
	public void createGUI(final Composite parent){
		this.parent = parent;
		this.parent.setLayout(new GridLayout(2, false));
	}
	
	public Image getImageFromResourcePool(String image){
		return resourcePool.getImageUnchecked(image);
	}
	
	public void setActive(ImageViewComposite active){
		System.out.println(active.getTitle());
		this.active = active;
	}
	
	public IEventBroker getEventBroker(){
		return broker;
	}
	
	@Inject
	@Optional
	public void getNotifiedDicomTreeSelection(@UIEventTopic(EventConstants.DICOMBROWSER_ITEM_SELECTION) final DicomTreeItem selection){
		if(selection.getLevel() == DicomTreeItem.TREE_SERIES_LEVEL || selection.getLevel() == DicomTreeItem.TREE_OBJECT_LEVEL){
			Display.getCurrent().syncExec(new Runnable() {
				
				@Override
				public void run() {
					if(parent.getChildren().length < 4){
						/*active = new ImageViewComposite(parent, SWT.NO_SCROLL|SWT.BORDER, selection.getUid(), selection, resourcePool, ImageViewPart.this);
						active.setTool(toolevent.getFactory(), toolevent.getTool());
						parent.layout();*/
						
						//Job zum Bilderimport
						ImageLoader imageLoader = null;
						IJobManager manager = null;
						try {
							imageLoader = new ImageLoader("ImageLoader", selection);
							manager = Job.getJobManager();
							
							final IProgressMonitor monitor = new ImageLoaderDialog(shell, sync, broker);
							
							ProgressProvider provider = new ProgressProvider() {	
								@Override
								public IProgressMonitor createMonitor(Job job) {
									return monitor;
								}
							};
							manager.setProgressProvider(provider);
							imageLoader.schedule();
							images = imageLoader.getImages();
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			});	
		}
	}
	
	@Inject
	@Optional
	public void getNotifiedImagesLoaded(@UIEventTopic(EventConstants.IMAGES_LOADED) boolean done){
		System.out.println("ready");
	}
	
	@Inject
	@Optional
	public void getNotifiedToolSelection(@UIEventTopic(EventConstants.TOOL_CHANGED_ALL) AToolEvent event){
		
		toolevent = event;
		for(Control c : parent.getChildren()){
			if(c instanceof ImageViewComposite){
				System.out.println("Change tool to "+event.getTool());
				((ImageViewComposite) c).setTool(event.getFactory(), event.getTool());
			}
		}
	}
	
	
	public Shell getShell(){
		return shell;
	}
	/** CLASSLOADER TEST CODE
		Class klass = RawImageInputStream.class;

	    CodeSource codeSource = klass.getProtectionDomain().getCodeSource();

	    if ( codeSource != null) {

	        System.out.println(codeSource.getLocation());

	    }else System.out.println("LOADED");
	 */
}
