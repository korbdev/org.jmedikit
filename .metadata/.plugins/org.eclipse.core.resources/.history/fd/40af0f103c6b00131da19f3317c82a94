package org.jmedikit.plugin.io;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.preferences.ConfigurationScope;
import org.jmedikit.plugin.util.PreferencesConstants;
import org.osgi.service.prefs.Preferences;

public class PlugInClassLoader {
	
	public static final String PREFIX = "__";
	
	/**
	 * String muss mit Prefix beginnen. Danach folgt ein Grossbuchstabe von A-Z, gefolgt von beliebigen Zeichen
	 * wenn PREFIX = __
	 * __Test = true
	 * __T = true
	 * _Test = false
	 * __test = false
	 */
	public static final String PATTERN = "^"+PREFIX+"[A-Z].*";
	
	private static PlugInClassLoader loader = new PlugInClassLoader();
	
	private Preferences prefs;
	
	//private URL root;
	
	private URLClassLoader classloader;
	
	private File f;
	
	private Map<URL, String> plugins;
	
	private boolean loaded;
	
	private PlugInClassLoader(){
		prefs = ConfigurationScope.INSTANCE.getNode("org.jmedikit.plugin");
		plugins = new HashMap<URL, String>();
		String rootPath = prefs.get(PreferencesConstants.PLUGIN_DIRECTORY, "");
		loaded = false;
		try {
			f = new File(rootPath);
			//root = f.toURI().toURL();
			locatePluginFolders();
			
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}	
	}
	
	private void locatePluginFolders() throws MalformedURLException{
		if(f.isDirectory()){
			File[] files = f.listFiles();
			for(File file : files){
				if(file.isDirectory() && file.getName().matches(PATTERN)){
					System.out.println(file.getName());
					URL url = file.toURI().toURL();
					
					List<File> mainClasses = new ArrayList<File>();
					locatePlugInMainClass(file, mainClasses, file.getName());
					
					if(mainClasses.size() > 0){
						File classFile = mainClasses.get(0);
						String parent = file.getPath();
						String path = filenameWithoutExtension(classFile.getName());
						
						while(!classFile.getParent().equals(parent)){
							classFile = new File(classFile.getParent());
							path = classFile.getName()+"."+path;
						}
						plugins.put(url, path);
					}
				}
			}
		}
	}
	
	private void locatePlugInMainClass(File plugInRootDir, List<File> mainClasses, String pluginName){
		if(plugInRootDir.isDirectory()){
			File[] files = plugInRootDir.listFiles();
			for(File f : files){
				locatePlugInMainClass(f, mainClasses, pluginName);
			}
		}
		else{
			String filename = filenameWithoutExtension(plugInRootDir.getName());
			if(filename.equals(pluginName)){
				mainClasses.add(plugInRootDir);
			}
		}
	}
	
	private String filenameWithoutExtension(String filename){
		int pos = filename.lastIndexOf(".");
		if(pos > 0){
			return filename.substring(0, pos);
		}
		else return filename;
	}
	
	public loadPlugins(){
		
	}
	
	public static PlugInClassLoader getInstance(){
		return loader;
	}
}
