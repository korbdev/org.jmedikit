package org.jmedikit.plugin.gui;

import javax.annotation.PostConstruct;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Spinner;

public class AngleControl {
	
	private Composite controlContainer;
	
	private Spinner alpha, beta, gamma;
	
	private Listener alphaChangedListener = new Listener() {
		
		@Override
		public void handleEvent(Event event) {
			System.out.println("sel "+alpha.getSelection()+", "+event.type);
		}
	};
	
	private Listener alphaModifyListener = new Listener() {
		
		@Override
		public void handleEvent(Event event) {
			//System.out.println(event.keyCode);
			
		}
	};

	
	@PostConstruct
	public void constructGUI(Composite parent){
		parent.setLayout(new FillLayout());
		controlContainer = new Composite(parent, SWT.NONE);
		GridLayout controlContainerLayout = new GridLayout(3, true);
		controlContainer.setLayout(controlContainerLayout);
		
		int controlWidth = 35;
		int angleMax = 90;
		int angleMin = -90;
		
		alpha = new Spinner(controlContainer, SWT.NONE);
		GridData alphaData = new GridData(SWT.CENTER, SWT.CENTER, false, true, 1, 1);
		alphaData.widthHint = controlWidth;
		alpha.setLayoutData(alphaData);
		alpha.setMinimum(angleMin);
		alpha.setMaximum(angleMax);
		
		beta = new Spinner(controlContainer, SWT.NONE);
		GridData betaData = new GridData(SWT.CENTER, SWT.CENTER, false, true, 1, 1);
		betaData.widthHint = controlWidth;
		beta.setLayoutData(betaData);
		beta.setMinimum(angleMin);
		beta.setMaximum(angleMax);
		
		gamma = new Spinner(controlContainer, SWT.NONE);
		GridData gammaData = new GridData(SWT.CENTER, SWT.CENTER, false, true, 1, 1);
		gammaData.widthHint = controlWidth;
		gamma.setLayoutData(gammaData);
		gamma.setMinimum(angleMin);
		gamma.setMaximum(angleMax);
		
		alpha.addListener(SWT.Selection, alphaChangedListener);
		alpha.addListener(SWT.Modify, alphaModifyListener);
	}
}
