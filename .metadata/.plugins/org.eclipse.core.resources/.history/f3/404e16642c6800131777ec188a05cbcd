package org.jmedikit.plugin.gui.tools;

import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.jmedikit.lib.core.ImageWindowInterpolation;
import org.jmedikit.plugin.gui.DicomCanvas;

public class PointTool extends ATool{

	private int imageValue;
	
	private int interpolatedValue;
	
	private Image toolTip;
	
	private GC toolTipBuffer;
	
	public PointTool(DicomCanvas c) {
		super(c);
		Cursor cursor = new Cursor(canvas.getDisplay(), SWT.CURSOR_ARROW);
		canvas.setCursor(cursor);
		canvas.setToolTipText("Hallo");
		toolTip = new Image(canvas.getDisplay(), canvas.canvasDimension.width, canvas.canvasDimension.height);
		toolTipBuffer = new GC(toolTip);
	}

	@Override
	public void actionMouseMove(Event e) {
		//System.out.println(e.x+" x "+e.y+", "+ canvas.visibleImageBounds.toString()+", "+canvas.roi.toString()+", "+(canvas.imageCenter.x-canvas.imageDimension.width/2)+" x "+(canvas.imageCenter.y-canvas.imageDimension.height/2));
		int x = canvas.imageCenter.x-canvas.imageDimension.width/2;
		int y = canvas.imageCenter.y-canvas.imageDimension.height/2;
		int width = x+canvas.imageDimension.width;
		int height = y+canvas.imageDimension.height;

		if( (e.x >= x && e.x < width) && (e.y >= y && e.y < height)){
			int xCoordinate = (int)((((float)(e.x-x)/(float)canvas.imageDimension.width)*(float)canvas.sourceImage.getWidth())+0.5);
			int yCoordinate = (int)((((float)(e.y-y)/(float)canvas.imageDimension.height)*(float)canvas.sourceImage.getHeight())+0.5);
			
			imageValue = canvas.sourceImage.getPixel(xCoordinate, yCoordinate);
			interpolatedValue = ImageWindowInterpolation.interpolatePixel(imageValue, (int)canvas.windowCenter, (int)canvas.windowWidth, 0, 255);
		}
		else {
			imageValue = 0;
			interpolatedValue = 0;
		}
	}

	@Override
	public void actionMouseDown(Event e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void actionMouseUp(Event e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public GC preCalculation(GC toDraw) {
		// TODO Auto-generated method stub
		return toDraw;
	}

	@Override
	public GC postCalculation(GC toDraw) {
		
		//Color background = toDraw.getBackground();
		//Color foreground = toDraw.getForeground();
		//Font backupFont = toDraw.getFont();
		
		toolTipBuffer.setBackground(canvas.white);
		toolTipBuffer.setForeground(canvas.black);
		
		Font font = new Font(Display.getCurrent(), "Verdana", 8, SWT.NONE); 
		toolTipBuffer.setFont(font);
		
		String output = "Pixel Value: "+imageValue+", interpolated: "+interpolatedValue;
		Point  p = toolTipBuffer.textExtent(output);
		int xPos = p.x;
		int yPos = p.y;
		if(actual.x+p.x > canvas.canvasDimension.width && actual.y+p.y+30 > canvas.canvasDimension.height){
			toolTipBuffer.fillRectangle(actual.x, actual.y, -xPos, -yPos);
			toolTipBuffer.drawText(output, actual.x-xPos, actual.y-yPos);
		}
		else if(actual.x+p.x > canvas.canvasDimension.width && actual.y+p.y+30 < canvas.canvasDimension.height){
			toolTipBuffer.fillRectangle(actual.x, actual.y+30, -xPos, yPos);
			toolTipBuffer.drawText(output, actual.x-xPos, actual.y+30);
		}
			
		else if(actual.x+p.x < canvas.canvasDimension.width && actual.y+p.y+30 > canvas.canvasDimension.height){
			toolTipBuffer.fillRectangle(actual.x, actual.y, xPos, -yPos);
			toolTipBuffer.drawText(output, actual.x, actual.y-yPos);
		}
		else {
			toolTipBuffer.fillRectangle(actual.x, actual.y+30, xPos, yPos);
			toolTipBuffer.drawText(output, actual.x, actual.y+30);
		}
		
		font.dispose();
		
		Color color = new Color(canvas.getDisplay(), new RGB(interpolatedValue, interpolatedValue, interpolatedValue));
		
		toolTipBuffer.setBackground(color);
		toolTipBuffer.fillRectangle(0, canvas.canvasDimension.height-10, canvas.canvasDimension.width, canvas.canvasDimension.height);
		
		//toolTipBuffer.setBackground(background);
		//toolTipBuffer.setForeground(foreground);
		//toolTipBuffer.setFont(backupFont);
		return toDraw;
	}

	@Override
	public void actionMouseEnter(Event e) {
		System.out.println("Exit");
	}

	@Override
	public void actionMouseExit(Event e) {
		System.out.println("Enter");
	}

}
