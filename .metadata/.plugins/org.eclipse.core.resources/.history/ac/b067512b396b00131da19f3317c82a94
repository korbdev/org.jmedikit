package org.jmedikit.plugin.io;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.preferences.ConfigurationScope;
import org.jmedikit.plugin.util.PreferencesConstants;
import org.osgi.service.prefs.Preferences;

public class PlugInClassLoader {
	
	public static final String PREFIX = "__";
	
	/**
	 * String muss mit Prefix beginnen. Danach folgt ein Grossbuchstabe von A-Z, gefolgt von beliebigen Zeichen
	 * wenn PREFIX = __
	 * __Test = true
	 * __T = true
	 * _Test = false
	 * __test = false
	 */
	public static final String PATTERN = "^"+PREFIX+"[A-Z].*";
	
	private static PlugInClassLoader loader = new PlugInClassLoader();
	
	private Preferences prefs;
	
	private URL root;
	
	private File f;
	
	private Map<URL, String> plugins;
	
	private PlugInClassLoader(){
		prefs = ConfigurationScope.INSTANCE.getNode("org.jmedikit.plugin");
		plugins = new HashMap<URL, String>();
		String rootPath = prefs.get(PreferencesConstants.PLUGIN_DIRECTORY, "");
		
		try {
			f = new File(rootPath);
			root = f.toURI().toURL();
			
			locatePluginFolders();
			
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
	}
	
	private void locatePluginFolders() throws MalformedURLException{
		if(f.isDirectory()){
			File[] files = f.listFiles();
			for(File file : files){
				if(file.isDirectory() && file.getName().matches(PATTERN)){
					System.out.println(file.getName());
					URL url = file.toURI().toURL();

					File mainClass = new File("");
					
					List<File> mcs = new ArrayList<File>();
					
					locatePlugInMainClass(file, mcs, file.getName());
					if(mcs.size() > 0){
						//int pos = file.getPath().lastIndexOf(mcs.get(0).getPath());
						//System.out.println("Hallo "+file.getPath().substring(0, pos));
						//System.out.println(file.getPath()+", "+mcs.get(0).getPath());
						//int start = file.getPath().length();
						File classFile = mcs.get(0);
						String parent = file.getPath()
								;
						String path = filenameWithoutExtension(classFile.getName());
						while(!classFile.getParent().equals(parent)){
							classFile = new File(classFile.getParent());
							path = classFile.getName()+"."+path;
						}
						//System.out.println(filenameWithoutExtension(mcs.get(0).getPath().substring(start+1)).replace("\\", "."));
						System.out.println(path);
					}
					//if(mc != null){
					//	int pos = file.getPath().lastIndexOf(mc.getPath());
					//	System.out.println("Hallo "+file.getPath().substring(0, pos));
					//}
				}
			}
		}
	}
	
	private void locatePlugInMainClass(File plugInRootDir, List<File> mainClasses, String pluginName){
		//System.out.println(plugInRootDir.getPath());
		if(plugInRootDir.isDirectory()){
			File[] files = plugInRootDir.listFiles();
			for(File f : files){
				locatePlugInMainClass(f, mainClasses, pluginName);
			}
		}
		else{
			String filename = filenameWithoutExtension(plugInRootDir.getName());
			//System.out.println("IMAFILE "+filename+", "+pluginName+", "+plugInRootDir.getPath());
			if(filename.equals(pluginName)){
				System.out.println("Add");
				mainClasses.add(plugInRootDir);
			}
		}
	}
	
	private String filenameWithoutExtension(String filename){
		int pos = filename.lastIndexOf(".");
		if(pos > 0){
			return filename.substring(0, pos);
		}
		else return filename;
	}
	
	public static PlugInClassLoader getInstance(){
		return loader;
	}
}
