package org.jmedikit.lib.util;


import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.widgets.Event;

public class ResizeTool extends ATool{

	float scale;
	
	public ResizeTool(){
		super();
	}
	
	public ResizeTool(DicomCanvas canvas) {
		super(canvas);
		scale = 0;
	}

	@Override
	void actionMouseMove(Event e) {
		if(mouseDown){
			float scaleOld = scale;
			scale = (float)(actual.y - start.y)/100;
			
			float scaleNew = 1 + scale;
			
			System.out.println("Scale "+scale+", scaleNew "+scaleNew);
			
			if(scale > 0){
				//float newScale = (float)Math.abs(scale);
				int newWidth = (int) (canvas.imageDimension.width * (scaleNew));
				int newHeight = (int) (canvas.imageDimension.height * (scaleNew));
				//System.out.println("Scale positive" + scaleOld + ", "+newScale+", "+(1+newScale-scaleOld));
				//System.out.println("width "+ newWidth);
				//System.out.println("height "+ newHeight);
				canvas.imageDimension.width = newWidth;
				canvas.imageDimension.height = newHeight;
			}
			else{
				//float newScale = (float)Math.abs(scale);
				int newWidth = (int) (canvas.imageDimension.width * (scaleNew));
				int newHeight = (int) (canvas.imageDimension.height * (scaleNew));
				//System.out.println("Scale negative" + scaleOld + ", "+newScale+", "+(1-newScale-scaleOld));
				//System.out.println("width "+ newWidth);
				//System.out.println("height "+ newHeight);
				canvas.imageDimension.width = newWidth;
				canvas.imageDimension.height = newHeight;
			}
				
		}
		
	}

	@Override
	void actionMouseDown(Event e) {

	}

	@Override
	void actionMouseUp(Event e) {

	}

	@Override
	GC postCalculation(GC toDraw) {
		return toDraw;
	}

	
}
