package org.jmedikit.lib.image;

import java.awt.image.DataBuffer;
import java.awt.image.DataBufferByte;
import java.awt.image.DataBufferUShort;

public class IntegerImage extends AbstractImage{

	int[] pixels;
	
	public IntegerImage(int width, int height) {
		super(width, height);
		imageType = AbstractImage.TYPE_INT_SIGNED;
		pixels = new int[width*height];
	}

	public IntegerImage(int width, int height, DataBuffer buffer){
		this(width, height);	

		if(buffer instanceof DataBufferByte){
			for(int i = 0; i < buffer.getSize(); i+=3){
				//storedValues[i] = buffer.getElem(i);
				byte r = (byte)buffer.getElem(i);
				byte g = (byte)buffer.getElem(i+1);
				byte b = (byte)buffer.getElem(i+2);
				//pixels[i]= 
			}
		}
		else throw new IllegalArgumentException("expected buffer type DataBufferUShort, "+buffer.getClass().getName()+" given");
	}
	
	public IntegerImage(int width, int height, DataBuffer buffer, float m, float b){
		this(width, height);	
		
		rescaleSlope = m;
		rescaleIntercept = b;
		
		if(buffer instanceof DataBufferByte){
			for(int i = 0; i < buffer.getSize(); i++){
				int value = buffer.getElem(i);
				//storedValues[i] = value;
				int red = (byte)buffer.getElem(i);
				int green = (byte)buffer.getElem(i+1);
				int blue = (byte)buffer.getElem(i+2);
				System.out.println(red+" "+green+" "+blue);
				pixels[i] = (int) (rescaleSlope * value + rescaleIntercept);
			}
		}
		else throw new IllegalArgumentException("expected buffer type DataBufferByte, "+buffer.getClass().getName()+" given");
		
		this.determineMinMaxValues(pixels);
	}
	
	public IntegerImage(int width, int height, DataBuffer buffer, float m, float b, float windowCenter, float windowWidth){
		this(width, height, buffer, m, b);	
		this.windowCenter = windowCenter;
		this.windowWidth = windowWidth;
	}
	
	@Override
	public int getPixel(int x, int y) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void setPixel(int x, int y, int value) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Object getPixels() {
		// TODO Auto-generated method stub
		return null;
	}

}
