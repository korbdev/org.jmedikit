package org.jmedikit.lib.core;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.jmedikit.lib.image.AImage;

public abstract class APlugIn {

	public static final int OPTION_PROCESS_ALL = 1;
	
	public static final int CLAIM_ALL = 2;
	
	private ArrayList<AImage> images;
	
	private int currentIndex;
	
	private AImage processingImage;
	
	private int options;
	
	protected abstract int options();
	
	protected boolean outputChanged = false;
	
	private PrintStream stdout;
	
	private PrintStream output;
	
	public int initialize(){
		stdout = System.out;
		options = options();
		return options;
	}
	
	protected abstract ArrayList<AImage> process(final List<AImage> claims);
	
	protected void setOutput(String filename){
		outputChanged = true;
		FileOutputStream f;
		try {
			File file = new File(filename);
			file.createNewFile();
			f = new FileOutputStream(file.getPath());
			output = new PrintStream(f);
			System.setOut(output);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public ArrayList<AImage> run(ArrayList<AImage> images, int currentIndex) throws IllegalAccessException{
		this.currentIndex = currentIndex;
		this.images = images;
		List<AImage> claims;
		
		if((options & APlugIn.CLAIM_ALL) == APlugIn.CLAIM_ALL){
			claims = Collections.unmodifiableList(images);
		}
		else{
			ArrayList<AImage> temp = new ArrayList<AImage>();
			temp.add(images.get(currentIndex));
			claims = Collections.unmodifiableList(temp);
		}
		
		int claimSize = claims.size();
		//processingImage = images.get(currentIndex);
		ArrayList<AImage> result = process(claims);
		System.out.println("RESULT "+result.size() + claims.size());
		if(result.size() != claimSize){
			throw new IllegalAccessException("RESULT SIZE DOES NOT MATCH CLAIM SIZE");
		}
		else{
			if((options & APlugIn.CLAIM_ALL) == APlugIn.CLAIM_ALL){
				for(int i = 0; i < images.size(); i++){
					AImage original = images.get(i);
					AImage resultImage = result.get(i);
					result.set(i, copyValues(resultImage, original));
				}
			}
			else{
				AImage original = images.get(currentIndex);
				AImage resultImage = result.get(currentIndex);
				copyValues(resultImage, original);
				
			}
		}
		return result;
	}
	
	private AImage copyValues(AImage result, AImage original){
		if(!result.getInitializedOrientation()){
			System.out.println(original.getMprType());
			result.copySignificantAttributes(original);
			result.setColumnImageOrientation(original.getColumnImageOrientation());
			result.setRowImageOrientation(original.getRowImageOrientation());
			result.setImagePosition(original.getImagePosition());
		}
		return result;
	}
	
	public int getOptions(){
		return options;
	}

	public boolean isOutputChanged(){
		return outputChanged;
	}
	
	public void cancelFileOutput(){
		outputChanged = false;
	}
	
	public void restoreSystemOut(){
		System.setOut(stdout);
	}
	
	public int getCurrentImageIndex(){
		return currentIndex;
	}
}
